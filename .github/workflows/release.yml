name: Build and Deploy to GKE

on:
  push:
    branches: [ "master" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: europe-southwest1
  GKE_CLUSTER: cluster-1    # TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
  REPOSITORY: gar-final-devops # TODO: update to Artifact Registry docker repository
  BUCKET_NAME: cs-final-devops
  IMAGE: dotnet-microservice

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: | 
          6
          7

    - name: 'Setup CycloneDX'
      run: dotnet tool install --global CycloneDX      

    - name: 'Restore app'
      run: dotnet restore DotNetMicroservice.sln

    - name: 'Build app'
      run: dotnet build DotNetMicroservice.sln

    - name: 'Test app'
      run: dotnet test DotNetMicroservice.sln

    - name: 'Generating bom file'
      run: |
        mkdir bom_file_output
        dotnet CycloneDX DotNetMicroservice.sln -o bom_file_output

    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        project_id: '${{ env.PROJECT_ID }}'

    - id: 'upload-file'
      uses: 'google-github-actions/upload-cloud-storage@v1'
      with:
        path: 'bom_file_output/bom.xml'
        destination: "$BUCKET_NAME/bom.xml"

    - name: 'Docker auth'
      run: |-
        gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

    # Get the GKE credentials so we can deploy to the cluster
    #- name: Set up GKE credentials
    #  uses: google-github-actions/get-gke-credentials@v0
    #  with:
    #    cluster_name: ${{ env.GKE_CLUSTER }}
    #    location: ${{ env.GKE_ZONE }}

    # Build the Docker image
    - name: Build
      run: |-
        cd Microservice
        docker build \
          --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
    # Set up kustomize
    #- name: Set up Kustomize
    #  run: |-
    #    curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
    #    chmod u+x ./kustomize
    # Deploy the Docker image to the GKE cluster
    #- name: Deploy
    #  run: |-
    #    # replacing the image name in the k8s template
    #    ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
    #    ./kustomize build . | kubectl apply -f -
    #    kubectl rollout status deployment/$DEPLOYMENT_NAME
    #    kubectl get services -o wide
